# SAMPLES = ["A", "B", "C"]
# GENOMES = ["hg38_refgenome"]
# BARCODE_DIRECTORIES = ["barcode01",  "barcode02",  "barcode03",  "barcode04",  "barcode05",  "barcode06",  "barcode07",  "barcode08",  "barcode09",  "barcode11"]

configfile: "config.yaml"



rule all:
    input:
        expand("fastqc_trimmed/{sample}_fastqc.zip", sample=config["samples"].keys())
        expand("{barcode}_kurona.fastq", barcode=config["BARCODE_DIRECTORIES"].keys())

# def get_fastqs(wildcards):
#     return find_fast


# Basecalling met Dorado i.p.v. Guppy:
# rule dorado_basecall:
#     input:


# rule get_fastq_samples:
#     input: 
#         get_fastqs

# rule fastqc:
#     input:
#         "samples/{sample}.fastq"
#     output:
#         html="fastqc/{sample}.html",
#         zip="fastqc/{sample}_fastqc.zip"
#     params:
#         extra = "--quiet"
#     log:
#         "logs/fastqc/{sample}.log"
#     threads: 32
#     resources:
#         mem_mb = 1024
#     wrapper:
#         "v5.8.2/bio/fastqc"


rule fastq_qc_plong:
    input:
        lambda wildcards: config["samples"][wildcards.sample]
    output:
        html="fastqc/{sample}.html"
    log:
        "logs/fastqc/{sample}.log"
    shell:
        "fastplong -i {input} -o {output} 2> {log}"



# rule trimmomatic:
#     input:
#         "samples/{sample}.fastq" 
#     output:
#         "trimmed/{sample}.fastq"
#     log:
#         "logs/trimmomatic/{sample}.log"
#     params:
#         trimmer=["SLIDINGWINDOW:4:20", "MINLEN:50"],
#         extra="",
#         compression_level="-9"
#     threads:
#         32
#     resources:
#         mem_mb=1024
#     wrapper:
#         "v5.8.3/bio/trimmomatic/se"


# rule fastqc_trimmed:
#     input:
#         "trimmed/{sample}.fastq"
#     output:
#         html="fastqc_trimmed/{sample}.html",
#         zip="fastqc_trimmed/{sample}_fastqc.zip"
#     params:
#         extra = "--quiet"
#     log:
#         "logs/fastqc/{sample}.log"
#     threads: 32
#     resources:
#         mem_mb = 1024
#     wrapper:
#         "v5.8.2/bio/fastqc"



# Om de fastq bestanden te combineren voor de analyze met kurona.
# To-do: directories als input geven om deze bestanden te genereren.
rule kurona_preprocessing:
    input:
        lambda wildcards: config["BARCODE_DIRECTORIES"][wildcards.barcode]
    output: 
    "{barcode}_kurona.fastq"

    shell: 
        "cat {input}/*.fastq > {output}"



# rule bwa_index:
#     input:
#         "{genome}.fasta",
#     output:
#         idx=multiext("index/{genome}.bwtsw", ".amb", ".ann", ".bwt", ".pac", ".sa"),
#     log:
#         "logs/bwa_index/{genome}.bwtsw.log",
#     params:
#         extra="",
#     wrapper:
#         "v5.8.3/bio/bwa/index"



# rule bwa_aln:
#     input:
#         fastq="trimmed/{sample}.fastq",
#         idx=multiext("index/hg38_refgenome.bwtsw", ".amb", ".ann", ".bwt", ".pac", ".sa"),
#     output:
#         temp("sai/{sample}.sai"),
#     params:
#         extra="",
#     log:
#         "logs/bwa_aln/{sample}.log",
#     threads: 8
#     wrapper:
#         "v5.8.3/bio/bwa/aln"


# rule bwa_samse:
#     input:
#         fastq="trimmed/{sample}.fastq",
#         sai="sai/{sample}.sai",
#         idx=multiext("index/hg38_refgenome.bwtsw", ".amb", ".ann", ".bwt", ".pac", ".sa"),
#     output:
#         "mapped/{sample}.bam",
#     params:
#         extra=r"-r '@RG\tID:{sample}\tSM:{sample}'",
#         sort="none", 
#         sort_order="queryname", 
#         sort_extra="",
#     log:
#         "logs/bwa_samse/{sample}.log",
#     wrapper:
#         "v5.8.3/bio/bwa/samse"


# rule samtools_depth:
#     input:
#         "mapped/{sample}.bam",
#     output:
#         "coverage_depths/{sample}_depth.txt",
#     log: 
#         "logs/{sample}_depth_error.txt"
#     threads:
#         32
#     shell:
#         "samtools depth -@ {threads} {input} > {output} 2> {log}"
