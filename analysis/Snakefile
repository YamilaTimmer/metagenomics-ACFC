configfile: "config.yaml"


# expand("{barcode}_kurona.fastq", barcode=config["BARCODE_DIRECTORIES"].keys()),



rule all:
    input:
        # QC with Fastplong:
        expand("trimmed/{sample}.fastq", sample=config["samples"].keys()),
        expand("reports/{sample}_fastplong_QC.html", sample=config["samples"].keys()),
        # For kraken2:
        expand("logs/kraken2/{sample}.log", sample=config["samples"].keys()), 
        expand("kraken2/{sample}_output.txt", sample=config["samples"].keys()),
        expand("reports/kraken2/{sample}_report.txt", sample=config["samples"].keys()),
        expand("bracken/{sample}.out", sample=config["samples"].keys())
	# Krona:
     	expand("logs/krona/{sample}.log", sample=config["samples"].keys()), 
        expand("krona/{sample}_krona.html", sample=config["samples"].keys()),


rule kraken2_taxonomic_classification:
    input:
        reads="trimmed/{sample}.fastq"
    output:
        report="reports/kraken2/{sample}_report.txt",
        output="kraken2/{sample}_output.txt"
    log:
        "logs/kraken2/{sample}.log"
    params:
        db="/data/datasets/KRAKEN2_INDEX/16S_Greengenes/",  
        confidence="0.1",               
        threads=128                    
    shell:
        """
        kraken2 --db {params.db} \
                --threads {params.threads} \
                --confidence {params.confidence} \
                --output {output.output} \
                --special greengenes \
                --report {output.report} \
                --gzip-compressed
                {input.reads} 2> {log}
        """

rule krona_visualisation:
    input:
        kraken_files="kraken2/{sample}_output.txt"
    output: 
        krona_vis="krona/{sample}_krona.html"
    log:
        "logs/krona/{sample}.log"
    shell:
        """
         ktImportTaxonomy -t 5 \
                          -m 3 \
                          -o 
        """
 

# Quality control and adapter trimming:
rule fastq_qc_plong:
    input:
        lambda wildcards: config["samples"][wildcards.sample]
    output:
        fastq="trimmed/{sample}.fastq",
        html="reports/{sample}_fastplong_QC.html"
    log:
        "logs/QC/{sample}.log"
    shell:
        "tools/fastplong -i {input} -o {output.fastq} -h {output.html} 2> {log}"


# Om de fastq bestanden te combineren voor de analyze met kurona.
# To-do: directories als input geven om deze bestanden te genereren.
rule kurona_preprocessing:
    input:
        lambda wildcards: config["BARCODE_DIRECTORIES"][wildcards.barcode]
    output: 
    "{barcode}_kurona.fastq"

    shell: 
        "cat {input}/*.fastq > {output}"


# For bracken, only genus level worked, not species level (https://github.com/jenniferlu717/Bracken/issues/117)
rule bracken:
    input:
        kraken_report = "reports/kraken2/{sample}_report.txt",
        kraken_database = "/data/datasets/KRAKEN2_INDEX/16S_Greengenes"
    output:
        bracken_report = "bracken/{sample}_bracken_report.txt",
        bracken_output = "bracken/{sample}.out"
    params:
        read_lenght = 150,
        threshold = 10,
        level = "G"
    log: 
        "logs/bracken/{sample}.log"
    threads: 32
    shell:
        """
        bracken -d {input.kraken_database} -i {input.kraken_report} -o {output.bracken_output} -w {output.bracken_report} -r {params.read_lenght} -t {params.threshold} -l {params.level} 2> {log}

        """


# To-do: Use seperate environments for all rules...(base)
