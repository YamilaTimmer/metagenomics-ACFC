configfile: "config.yaml"


# expand("{barcode}_kurona.fastq", barcode=config["BARCODE_DIRECTORIES"].keys()),



rule all:
    input:
        # QC with Fastplong:
        expand("trimmed/{sample}.fastq", sample=config["samples"].keys()),
        expand("reports/{sample}_fastplong_QC.html", sample=config["samples"].keys()),
        # For kraken2:
        expand("logs/kraken2/{sample}.log", sample=config["samples"].keys()), 
        expand("kraken2/{sample}_output.txt", sample=config["samples"].keys()),
        expand("reports/kraken2/{sample}_report.txt", sample=config["samples"].keys())



rule kraken2_taxonomic_classification:
    input:
        reads="trimmed/{sample}.fastq"
    output:
        report="reports/kraken2/{sample}_report.txt",
        output="kraken2/{sample}_output.txt"
    log:
        "logs/kraken2/{sample}.log"
    params:
        db="/data/datasets/KRAKEN2_INDEX/16S_Greengenes/",  
        confidence="0.1",               
        threads=128                    
    shell:
        """
        kraken2 --db {params.db} \
                --threads {params.threads} \
                --confidence {params.confidence} \
                --output {output.output} \
                --report {output.report} \
                {input.reads} 2> {log}
        """


# rule get_fastq_samples:
#     input: 
#         get_fastqs

# rule fastqc:
#     input:
#         "samples/{sample}.fastq"
#     output:
#         html="fastqc/{sample}.html",
#         zip="fastqc/{sample}_fastqc.zip"
#     params:
#         extra = "--quiet"
#     log:
#         "logs/fastqc/{sample}.log"
#     threads: 32
#     resources:
#         mem_mb = 1024
#     wrapper:
#         "v5.8.2/bio/fastqc"


# Quality control and adapter trimming:
rule fastq_qc_plong:
    input:
        lambda wildcards: config["samples"][wildcards.sample]
    output:
        fastq="trimmed/{sample}.fastq",
        html="reports/{sample}_fastplong_QC.html"
    log:
        "logs/QC/{sample}.log"
    shell:
        "tools/fastplong -i {input} -o {output.fastq} -h {output.html} 2> {log}"


rule kurona_preprocessing:
    input:
        lambda wildcards: config["BARCODE_DIRECTORIES"][wildcards.barcode]
    output: 
    "{barcode}_kurona.fastq"

    shell: 
        "cat {input}/*.fastq > {output}"




# rule trimmomatic:
#     input:
#         "samples/{sample}.fastq" 
#     output:
#         "trimmed/{sample}.fastq"
#     log:
#         "logs/trimmomatic/{sample}.log"
#     params:
#         trimmer=["SLIDINGWINDOW:4:20", "MINLEN:50"],
#         extra="",
#         compression_level="-9"
#     threads:
#         32
#     resources:
#         mem_mb=1024
#     wrapper:
#         "v5.8.3/bio/trimmomatic/se"


# rule fastqc_trimmed:
#     input:
#         "trimmed/{sample}.fastq"
#     output:
#         html="fastqc_trimmed/{sample}.html",
#         zip="fastqc_trimmed/{sample}_fastqc.zip"
#     params:
#         extra = "--quiet"
#     log:
#         "logs/fastqc/{sample}.log"
#     threads: 32
#     resources:
#         mem_mb = 1024
#     wrapper:
#         "v5.8.2/bio/fastqc"





# rule bwa_index:
#     input:
#         "{genome}.fasta",
#     output:
#         idx=multiext("index/{genome}.bwtsw", ".amb", ".ann", ".bwt", ".pac", ".sa"),
#     log:
#         "logs/bwa_index/{genome}.bwtsw.log",
#     params:
#         extra="",
#     wrapper:
#         "v5.8.3/bio/bwa/index"



# rule bwa_aln:
#     input:
#         fastq="trimmed/{sample}.fastq",
#         idx=multiext("index/hg38_refgenome.bwtsw", ".amb", ".ann", ".bwt", ".pac", ".sa"),
#     output:
#         temp("sai/{sample}.sai"),
#     params:
#         extra="",
#     log:
#         "logs/bwa_aln/{sample}.log",
#     threads: 8
#     wrapper:
#         "v5.8.3/bio/bwa/aln"


# rule bwa_samse:
#     input:
#         fastq="trimmed/{sample}.fastq",
#         sai="sai/{sample}.sai",
#         idx=multiext("index/hg38_refgenome.bwtsw", ".amb", ".ann", ".bwt", ".pac", ".sa"),
#     output:
#         "mapped/{sample}.bam",
#     params:
#         extra=r"-r '@RG\tID:{sample}\tSM:{sample}'",
#         sort="none", 
#         sort_order="queryname", 
#         sort_extra="",
#     log:
#         "logs/bwa_samse/{sample}.log",
#     wrapper:
#         "v5.8.3/bio/bwa/samse"


# rule samtools_depth:
#     input:
#         "mapped/{sample}.bam",
#     output:
#         "coverage_depths/{sample}_depth.txt",
#     log: 
#         "logs/{sample}_depth_error.txt"
#     threads:
#         32
#     shell:
#         "samtools depth -@ {threads} {input} > {output} 2> {log}"

